#!/usr/bin/env bash
#
# Summary: Updates to latest version of jlenv and plugins using git.
#
# Usage: jlenv update [--noop|--verbose|--quiet|--silent|--version|--help]
#
# Executes a git pull for each plugin.
# Failures are collected and reported at the end.
#
#  --quite|silent  Quite mode. Prints no output.
#  --noop          Print would-be command only. Command is not executed.
#  --verbose       Verbose mode. Prints a header for each plugin.
#
# For more information on jlenv-update, see:
# https://github.com/jlenv/jlenv-update#readme


set -e
case ${JLENV_DEBUG:-1} in
  0) # Enable tracing
    set -x
    ;;
  1) # Disable tracing
    set +x
    ;;
  *) # Disable tracing
    set +x
    ;;
esac

# Parse command line flags. Provide jlenv completions
# Two git commands and their flags are used: 
# - remote --verbose
# - pull   --verbose --quiet --dry-run
# Set the flag values  
noop=""
verbose=""
quiet=""
# Argument handling is broken
for arg; do
  case "$arg" in
  --complete )
    echo --help | help
    echo --noop
    echo --quiet
    echo --verbose
    echo --version
    exit ;;
  -n | --noop )
    quiet=false 
    noop=true 
    export _GIT_QUIET=''
    export _GIT_NOOP='--dry-run'
    shift
    ;;
  -v | --verbose ) 
    verbose=true
    quiet=false
    export _GIT_VERBOSE='--verbose'
    export _GIT_QUIET=''
    shift
    ;;
  --version )
    echo "v1.0.0"
    exit
    ;;
  -q | --quiet ) 
    quiet=true
    verbose=false
    export _GIT_VERBOSE=''
    export _GIT_QUIET='--quiet'
    shift
    ;;
  --help | help )
    exec jlenv-help update
    exit
    ;;
  ""  | -*  )
    jlenv-help --usage update >&2
    exit 1 ;;
  esac
done

# Set colored output for TTY. Solarixed scheme.
GREEN=""
NORMAL=""

if [ -t 1 ]; then
  GREEN="\033[38;5;64m" 
  NORMAL='\033[0m'
fi

trap "exit 1" INT

# Helper functions.
indent_output() {
  while read -r data; do
    printf " ${GREEN}|${NORMAL}  %s\n" "$data"
  done
}

print_colored() {
  if [ "$quiet" != "true" ]; then
    printf "${GREEN}%s${NORMAL}\n" "$1"
  fi
}

_git() {
  if [ "$noop" == "true" ]; then
    # pull has --dry-run and remote is a noop. So execute command.
    print_colored "git \"$*\"" | indent_output
    command git "$@" | indent_output
  elif [ "$quiet" = "true" ]; then
    # mute stdout and stderr
    command git "$@" &>/dev/null
  elif [ "$verbose" = "true" ]; then
    # indent stdout and stderr
    export GIT_CURL_VERBOSE=1 
    command git "$@" 2>&1 | indent_output
  else
    # mute stdout, indent stderr
    export GIT_CURL_VERBOSE=0
    command git "$@" 2>&1 >/dev/null | indent_output
  fi
}

is_jlenv_git_repo() {
  # cd $JLENV_ROOT
    git remote ${_GIT_VERBOSE} 2>/dev/null | grep 'jlenv\|julia-build'
}

jlenv_update() {
  if is_jlenv_git_repo; then
    print_colored "Updating $1"
    _git pull ${_GIT_VERBOSE} ${_GIT_QUIET} ${_GIT_NOOP} --no-rebase --ff
  else
    print_colored "Skipping $1; not an jlenv git repo"
  fi
}

#####################################################################
# Main script
#####################################################################

cd "$(dirname "$(command -v jlenv)")"

# Update jlenv first.  Then proceed to update plugins.
jlenv_update jlenv

# Loop over installed plugins.
shopt -s nullglob
for plugin in "$JLENV_ROOT"/plugins/*; do

  pushd "$plugin" >/dev/null
    #jlenv_update "$(basename "$plugin")" || failed_plugins="$failed_plugins $plugin"
    jlenv_update "$(basename "$plugin")"
  popd >/dev/null
done
shopt -u nullglob

unset _GIT_QUIET
unset _GIT_VERBOSE
unset _GIT_NOOP
